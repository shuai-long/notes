function plugin(t, e) { const n = "\x3c!-- toc --\x3e"; const a = '<div class=\'toc-page-div\'></div><div class=\'toc-paginator-div\'><div class=\'tocPaginatorLeftButtonDiv toc-paginator-button-div\'><?xml version="1.0" encoding="UTF-8"?><svg width="20px" height="20px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" color="var(--theme-color,#ea6f5a)"><path d="M15 6l-6 6 6 6" stroke="var(--theme-color,#ea6f5a)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div><div class=\'toc-paginator-input\'></div><div class=\'tocPaginatorRightButtonDiv toc-paginator-button-div\'><?xml version="1.0" encoding="UTF-8"?><svg width="20px" height="20px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" color="var(--theme-color,#ea6f5a)"><path d="M9 6l6 6-6 6" stroke="var(--theme-color,#ea6f5a)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div>'; const i = ["README", "PersonalTen", "PersonalRecords"]; const o = ["jpg", "gif", "png", "webp", "jpeg"]; const s = 8; let r = false; let l = []; let c = 1; let g = 1; function d(t, e) { return Math.floor(Math.random() * (e - t + 1)) + t } function u(t) { if (Number.isNaN(t - "0")) { return "&nbsp" } if (t.length !== 8) { return "&nbsp" } return t.substring(0, 4) + "-" + t.substring(4, 6) + "-" + t.substring(6, 8) } function f() { if (r) { document.body.classList.add("force-close") } else { document.body.classList.remove("force-close") } } function p(t) { var e = new XMLHttpRequest; e.open("HEAD", t, false); e.send(); return e.status != 404 } function v(n) { var a = ""; o.some(t => { var e = p(n + "." + t); if (e) { a = t } return e }); return a } function h() { r = false } function m(t, e) { return t.replace(n, a) } function b() { pages = Array.from(document.getElementsByClassName("sidebar-nav")[0].getElementsByTagName("a")); pages.shift(); pages = pages.filter(e => { var n = false; i.forEach(t => { if (e.href.indexOf(t) > 0) { n = true } }); return !n }); pages.sort((t, e) => { aDate = t.href.substring(t.href.length - 8); bDate = e.href.substring(e.href.length - 8); if (Number.isNaN(aDate - "0")) { aDate = "-1" } if (Number.isNaN(bDate - "0")) { bDate = "-1" } return bDate - aDate }); l = pages; g = Math.ceil(pages.length / s); D() } function D() { tocPageDiv = document.getElementsByClassName("toc-page-div")[0]; tocPageDiv.innerHTML = ""; if (c < 1) { c = 1 } if (c > g) { c = g } let t = l.slice((c - 1) * s, c * s); t.forEach(t => { pageHref = t.href; tmp = pageHref.replace("#/", ""); pagePictureHref = tmp.substring(0, tmp.lastIndexOf("/")) + "/_media" + tmp.substring(tmp.lastIndexOf("/")) + "/cover-picture"; pagePictureHref += "." + "jpg"; pageHrefDiv = "<a class='toc-page-display-a' href=" + pageHref + "><div class='toc-page-display-div'><div class='toc-page-display-title-img'><img class='ignore-view-full-image-img' src='" + pagePictureHref + "' loading='lazy' onerror='this.src=\"_media/defaultImg/picture-2.gif\"'></div><div class='toc-page-display-title-div'>" + t.innerHTML + "</div><div class='toc-page-display-date-div'>" + u(tmp.substr(tmp.length - 8)) + "</div></div></a>"; tocPageDiv.innerHTML += pageHrefDiv }); tocPaginatorInputDiv = document.getElementsByClassName("toc-paginator-input"); if (tocPaginatorInputDiv.length > 0) { tocPaginatorInputDiv = tocPaginatorInputDiv[0]; if (tocPaginatorInputDiv.hasChildNodes()) { tocPaginatorInputDiv.childNodes[0].value = c } } document.scrollingElement.scrollTop = 0 } function y() { tocPaginatorDiv = document.getElementsByClassName("toc-paginator-div")[0]; tocPaginatorInputDiv = document.getElementsByClassName("toc-paginator-input")[0]; tocPaginatorLeftButtonDiv = document.getElementsByClassName("tocPaginatorLeftButtonDiv")[0]; tocPaginatorRightButtonDiv = document.getElementsByClassName("tocPaginatorRightButtonDiv")[0]; tocPaginatorLeftButtonDiv.onclick = function (t) { if (c > 1) { c -= 1; D() } }; tocPaginatorRightButtonDiv.onclick = function (t) { if (c < g) { c += 1; D() } }; tocPaginatorInputDiv.innerHTML = "<input class='tocPaginatorInputBox' type='number' value='" + c + "' min='1' max='" + g + "'></input><span>/</span><span>" + g + "</span>"; tocPaginatorInput = tocPaginatorInputDiv.childNodes[0]; tocPaginatorInput.onchange = function () { c = this.value; D(); this.value = c } } t.beforeEach(function (t) { r = t.includes(n); if (r) { t = m(t, e) } return t }); t.doneEach(function () { if (r) { b(); y() } f(); h(); document.scrollingElement.scrollTop = 0; let e = location.href.split("#")[1]; if (e != "/") { Array.from(document.getElementsByClassName("sidebar-nav")[0].getElementsByTagName("a")).some(t => { if (t.href.split("#")[1] === e) { if (document.title != t.textContent) { document.title = t.textContent } return true } return false }) } }) }
function dashboardPlugin(t, e) {
    let metadata = [];
    let hasSubtitle = false;
    const defaultConfig = {
      numTabContent: 3,
      metadataUrl: "metadata/posts"
    };
    let currentConfig = {...defaultConfig};
    let tagList = [];
  
    // 解析元数据
    const fetchMetadata = path => {
      try {
        const xhr = new XMLHttpRequest();
        xhr.open("GET", `${path}.json`, false);
        xhr.send(null);
        return JSON.parse(xhr.response);
      } catch (error) {
        console.error("Metadata load failed:", error);
        return [];
      }
    };
  
    // 生成卡片HTML
    const generateCard = item => {
      const { time, title, subtitle, tag, image, href } = item;
      return `<a class="toc-page-display-a" href="${href}">
        <div class="toc-page-display-div">
          <div class="toc-page-display-title-img">
            <img class="ignore-view-full-image-img" src="${image}" loading="lazy">
          </div>
          <div class="toc-page-display-title-div">${title}</div>
          ${hasSubtitle ? `<div class="toc-page-display-subtitle-div">${subtitle}</div>` : ''}
          <div class="toc-page-display-date-div">
            ${time} • ${Array.isArray(tag) ? tag.join(' · ') : tag}
          </div>
        </div>
      </a>`;
    };
  
    // 配置解析逻辑
    const parseDashboardConfig = content => {
      const configRegex = /<!--\s*dashboard:\s*({.+?})\s*-->/;
      const match = content.match(configRegex);
      if (match) {
        try {
          const rawConfig = match[1].replace(/(\w+):/g, '"$1":');
          return JSON.parse(rawConfig);
        } catch (e) {
          console.warn("Invalid dashboard config:", e);
          return null;
        }
      }
      return null;
    };
  
    t.beforeEach(content => {
      // 解析配置
      const customConfig = parseDashboardConfig(content);
      if (customConfig) {
        currentConfig = {...defaultConfig, ...customConfig};
        content = content.replace(/<!--\s*dashboard:\s*{.+?}\s*-->/g, "<!-- dashboard -->");
      }
  
      // 生成仪表盘
      if (content.includes("<!-- dashboard -->")) {
        let generatedContent = "";
        const itemsPerPage = currentConfig.numTabContent;
        
        for (let page = 0; page < Math.ceil(metadata.length / itemsPerPage); page++) {
          generatedContent += `\n\n#### 第 ${page + 1} 页\n\n<div class="toc-page-div">\n`;
          const pageItems = metadata.slice(page * itemsPerPage, (page + 1) * itemsPerPage);
          generatedContent += pageItems.map(generateCard).join("\n");
          generatedContent += "\n</div>\n";
        }
        
        return content.replace(/<!--\s*dashboard\s*-->/g, generatedContent);
      }
      return content;
    });
  
    t.init(() => {
      // 初始化加载元数据
      metadata = fetchMetadata(currentConfig.metadataUrl);
      hasSubtitle = metadata.some(item => item.subtitle);
      
      // 生成标签列表
      const allTags = new Set();
      metadata.forEach(item => {
        if (item.tag) {
          Array.isArray(item.tag) ? item.tag.forEach(t => allTags.add(t)) : allTags.add(item.tag);
        }
      });
      tagList = Array.from(allTags);
    });
  
    // 标签页面处理
    const handleTagPage = () => {
      const tagPageDiv = document.querySelector(".markdown-section");
      if (!tagPageDiv) return;
  
      const urlParams = new URLSearchParams(window.location.hash.split("?")[1]);
      const currentTag = urlParams.get("tag");
      
      if (currentTag) {
        const decodedTag = decodeURIComponent(currentTag);
        const filteredItems = metadata.filter(item => 
          item.tag && item.tag.includes(decodedTag)
        );
        
        tagPageDiv.innerHTML = `
          <h1>${decodedTag}</h1><hr>
          <div class="toc-page-div">
            ${filteredItems.map(generateCard).join("\n")}
          </div>
        `;
      } else {
        tagPageDiv.innerHTML = `
          <h1>标签云</h1><hr>
          <div class="tag-cloud">
            ${tagList.map(tag => `
              <a href="#/tags?tag=${encodeURIComponent(tag)}" class="tag-item">
                ${tag}
              </a>
            `).join("\n")}
          </div>
        `;
      }
    };
  
    // 侧边栏标签列表
    const updateSidebarTags = () => {
      const sidebar = document.querySelector(".sidebar-nav");
      if (sidebar && sidebar.innerHTML.includes("<!-- tag-list -->")) {
        sidebar.innerHTML = sidebar.innerHTML.replace(
          "<!-- tag-list -->",
          `<div class="tag-sidebar">
            ${tagList.map(tag => `
              <a href="#/tags?tag=${encodeURIComponent(tag)}" class="tag-link">
                ${tag}
              </a>
            `).join("\n")}
          </div>`
        );
      }
    };
  
    t.doneEach(() => {
      handleTagPage();
      updateSidebarTags();
    });
  }
window.$docsify.plugins = [].concat([plugin, dashboardPlugin], window.$docsify.plugins);